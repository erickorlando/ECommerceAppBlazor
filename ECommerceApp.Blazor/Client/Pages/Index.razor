@page "/"
@page "/index"
@inject ProxyProductos ProxyProductos
@inject SweetAlertService Swal
@inject NavigationManager NavigationManager

<PageTitle>Tienda Oficial</PageTitle>

<div class="row justify-content-center mt-3 mb-4">
    <div class="col-sm-6 col-md-8 col-xl-9">
        <div class="input-group">
            <input type="text" class="form-control" placeholder="Buscar producto" @bind-value="Buscar" />
            <button class="btn btn-outline-secondary" @onclick="ObtenerCatalogo">
                <i class="oi oi-magnifying-glass"></i>
            </button>
        </div>
    </div>
</div>

@if (Productos is not null)
{
    <div class="container">
        <div class="row gx-4 row-cols-1 row-cols-md-3 row-cols-xl-4 justify-content-start">
            @foreach (var producto in Productos.OrderBy(p => p.Categoria))
            {
                <ProductoCard Producto="producto" OnClick="VerDetalle"></ProductoCard>
            }
        </div>
    </div>
}

<LoadingComponent IsLoading="@(Productos is null)" />

@code
{
    public ICollection<ProductoDto>? Productos { get; set; }

    public string Buscar { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await ObtenerCatalogo();
        }
        catch (Exception ex)
        {
            await Swal.FireAsync("Error", ex.Message, SweetAlertIcon.Error);
        }
    }

    private async Task ObtenerCatalogo()
    {
        Productos = await ProxyProductos.ListarProductos(Buscar);
    }

    private void VerDetalle(int id)
    {
        NavigationManager.NavigateTo($"/detalle/{id}");
    }
}
