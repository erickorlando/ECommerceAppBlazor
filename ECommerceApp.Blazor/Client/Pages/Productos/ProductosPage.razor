@page "/productos/list"
@inject NavigationManager NavigationManager
@inject ProxyProductos ProxyProductos
@inject IToastService ToastService
@attribute [Authorize(Roles = "Admin")]

<ListaProductos @ref="Componente" Lista="ListaDeProductos" OnSearch="CargarLista" OnEliminar="EliminarRegistro" />
<DataPager @ref="Paginador" Result="PagedResult" OnPageChanged="PaginaCambiada" OnPageSizeChanged="FilasPorPagina"></DataPager>

<LoadingComponent IsLoading="_cargando" />

<button @onclick="CargarLista" class="btn btn-success">Cargar Lista</button>
<button @onclick="CrearProducto" class="btn btn-success">Crear Producto</button>

@code {

    private bool _cargando;

    public ICollection<ProductoDto>? ListaDeProductos { get; set; }

    public ListaProductos Componente { get; set; } = null!;

    public DataPager Paginador { get; set; } = null!;

    public PagedResult<ProductoDto> PagedResult { get; set; } = null!;


    protected override async Task OnInitializedAsync()
    {
        PagedResult = new PagedResult<ProductoDto>
            {
                CurrentPage = 1,
                RowsPerPage = 5
            };
        await CargarLista();
    }

    private void CrearProducto()
    {
        NavigationManager.NavigateTo("/productos/crear");
    }

    private async Task CargarLista()
    {
        try
        {
            _cargando = true;
            var response = await ProxyProductos.ListarProductos(Componente?.TextoBusqueda, PagedResult.CurrentPage, PagedResult.RowsPerPage);
            if (response.Success)
            {
                ListaDeProductos = response.Data!;
                PagedResult.Results = ListaDeProductos;
                PagedResult.RowCount = ListaDeProductos.Count;
                PagedResult.TotalPages = response.TotalPages;
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError(ex.Message);
        }
        finally
        {
            _cargando = false;
        }
    }

    private async Task PaginaCambiada()
    {
        Console.WriteLine("Pagina Cambiada");
        await CargarLista();
    }

    private async Task FilasPorPagina()
    {
        Console.WriteLine($"Cambio el tamaño de la pagina a {PagedResult.RowsPerPage}");
        Paginador.Result = PagedResult;
        await CargarLista();
    }

    private async Task EliminarRegistro(int id)
    {
        await ProxyProductos.ElminarProducto(id);
        await CargarLista();
    }

}
